import streamlit as st
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import pandas as pd
import math
import json
import altair as alt
import plotly.express as px
import pydeck as pdk

# Page configuration
st.set_page_config(
    page_title="Atlas D√¢n s·ªë H√† N·ªôi",
    page_icon="üë®‚Äçüë©‚Äçüëß‚Äçüëß",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

# CSS styling
st.markdown("""
<style>
[data-testid="block-container"] {
    padding-top: 1rem;
    padding-bottom: 0rem;
    margin-bottom: -7rem;
}

[data-testid="stVerticalBlock"] {
    padding-left: 0rem;
    padding-right: 0rem;
}

[data-testid="stMetric"] {
    background-color: #393939;
    text-align: center;
    padding: 15px 0;
}

[data-testid="stMetricLabel"] {
  display: flex;
  justify-content: center;
  align-items: center;
}

[data-testid="stMetricDeltaIcon-Up"] {
    position: relative;
    left: 38%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

[data-testid="stMetricDeltaIcon-Down"] {
    position: relative;
    left: 38%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}
</style>
""", unsafe_allow_html=True)

# Load data
df_reshaped = pd.read_csv('data/population_hanoi.csv')
DATA_URL = "data/hanoi.geojson"
json = pd.read_json(DATA_URL)


def main():
    # B∆∞·ªõc 1: Import t·ªáp YAML v√†o script
    with open('config.yaml') as file:
        config = yaml.load(file, Loader=SafeLoader)

    # B∆∞·ªõc 2: T·∫°o ƒë·ªëi t∆∞·ª£ng Authenticator
    authenticator = stauth.Authenticate(
        config['credentials'],
        config['cookie']['name'],
        config['cookie']['key'],
        config['cookie']['expiry_days'],
        config['preauthorized']
    )

    # B∆∞·ªõc 3: Hi·ªÉn th·ªã widget ƒëƒÉng nh·∫≠p
    fields = ['username', 'password']

    # Hi·ªÉn th·ªã widget ƒëƒÉng nh·∫≠p ngay khi trang web ƒë∆∞·ª£c t·∫£i
    name, authentication_status, username = authenticator.login('main', fields=fields)
    def hash_password(password):
    # Th·ª±c hi·ªán bƒÉm m·∫≠t kh·∫©u, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng thu·∫≠t to√°n bƒÉm an to√†n nh∆∞ bcrypt
     hashed_password = hashlib.sha256(password.encode()).hexdigest()
     return hashed_password
    # B∆∞·ªõc 4: X·ª≠ l√Ω k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p v√† hi·ªÉn th·ªã n·ªôi dung t∆∞∆°ng ·ª©ng
    if authentication_status:
        st.sidebar.title('üë®‚Äçüë©‚Äçüëß‚Äçüëß Atlas D√¢n s·ªë H√† N·ªôi')

        year_list = list(df_reshaped.year.unique())[::-1]
        indicator_list = ["T√¥ÃÅc ƒë√¥Ã£ tƒÉng d√¢n s√¥ÃÅ b√¨nh qu√¢n (%)", "T·ªëc ƒë·ªô tƒÉng d√¢n s·ªë t·ª± nhi√™n (%)", "T·ªëc ƒë·ªô tƒÉng d√¢n s·ªë c∆° h·ªçc (%)", "M·∫≠t ƒë·ªô d√¢n s·ªë (ng∆∞·ªùi/km2)", "S·ªë tr·∫ª sinh (ng∆∞·ªùi)","T·ª∑ su·∫•t sinh", "S·ªë sinh 3+", "T·ª∑ l·ªá tr·∫ª 3+", "T·ª∑ l·ªá s√†ng l·ªçc tr∆∞·ªõc sinh (%)", "T·ª∑ l·ªá s√†ng l·ªçc s∆° sinh (%)", "T·ª∑ s·ªë gi·ªõi t√≠nh khi sinh (s·ªë tr·∫ª trai/100 tr·∫ª g√°i)"]
        indicator_list_key = ["rate", "rate_growth", "rate_mechanical", "density", "born", "birth_rate", "born_3", "born_per_3", "prenatal_screening", "newborn_screening", "m_to_f"]
        selected_indicator = st.sidebar.selectbox('Ti√™u ch√≠', indicator_list)
        selected_year = st.sidebar.selectbox('NƒÉm', year_list)
        df_selected_year = df_reshaped[df_reshaped.year == selected_year]
        df_selected_year_sorted = df_selected_year.sort_values(by="population", ascending=False)
        df_selected_year_rate_sorted = df_selected_year.sort_values(by="rate", ascending=False)

        color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
        selected_color_theme = st.sidebar.selectbox('M√†u s·∫Øc tr√¨nh b√†y bi·ªÉu ƒë·ªì', color_theme_list)
        st.session_state['authentication_status'] = True
        st.sidebar.button("Logout", on_click=authenticator.logout, args=('Logout', 'main'))
        show_reset_password_form = st.sidebar.button("Reset Password")
        show_Forgot_password_form = st.sidebar.button("Forgot Password")
        show_Forgot_Username_form = st.sidebar.button("Forgot Username")

        if show_Forgot_Username_form:
         st.title('Forgot Username')
         email = st.text_input('Enter your email:')
         reset_button_key = 'reset_button_' + email  # T·∫°o kh√≥a duy nh·∫•t cho n√∫t
         if st.button('Forgot Username', key=reset_button_key):
           try:
             username_forgot_username, email_forgot_username = authenticator.forgot_username(email)
             if username_forgot_username:
                st.success('Username sent securely')
                st.info(f'Username: {username_forgot_username}')  # G·ª≠i th√¥ng tin n√†y m·ªôt c√°ch an to√†n ƒë·∫øn ng∆∞·ªùi d√πng
             else:
                st.error('Email not found')
           except Exception as e:
            st.error(e)
            
        if show_Forgot_password_form:
            st.title('Forgot Password')
            username = st.text_input('Enter your username:') 
            reset_button_key = 'reset_button_' + username
            if st.button('Reset Password',key=reset_button_key):
                try:
                  username_forgot_pw, email_forgot_password, random_password = authenticator.forgot_password(username)
                  if username_forgot_pw:
                    st.success('New password sent securely')
                    st.info(f'Random password: {random_password}')  # Send this securely to the user
                  elif username_forgot_pw is False:
                    st.error('Username not found')
                except Exception as e:
                   st.error(e)

        if show_reset_password_form:
          with st.form("reset_password_form"):
           current_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u c≈©", type="password")
           new_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u m·ªõi", type="password")
           confirm_password = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n", type="password")
          

            # S·ª≠ d·ª•ng n√∫t Submit thay v√¨ button
           submitted = st.form_submit_button("L∆∞u")

          # Ki·ªÉm tra khi n√∫t "L∆∞u" ƒë∆∞·ª£c nh·∫•p
           if submitted:
            # Th·ª±c hi·ªán ki·ªÉm tra m·∫≠t kh·∫©u c≈© v√† x·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
            try:
                reset_result = authenticator.reset_password(
                    username,
                    fields={'current_password': current_password, 'new_password': new_password}
                )

                if reset_result:
                    # BƒÉm m·∫≠t kh·∫©u m·ªõi tr∆∞·ªõc khi c·∫≠p nh·∫≠t v√†o c·∫£ t·ªáp YAML v√† trong ƒë·ªëi t∆∞·ª£ng Authenticator
                    hashed_new_password = hash_password(new_password)
                    config['credentials']['usernames'][username]['password'] = hashed_new_password
                    authenticator.credentials['usernames'][username]['password'] = hashed_new_password

                    # L∆∞u v√†o t·ªáp YAML
                    with open('config.yaml', 'w') as file:
                        yaml.dump(config, file)

                    st.success("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!")
                else:
                    st.error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng ho·∫∑c m·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp. Vui l√≤ng th·ª≠ l·∫°i.")
            except Exception as e:
                st.error(f"C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {e}")
        # N·ªôi dung chi ti·∫øt c·ªßa trang sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        def make_heatmap(input_df, input_y, input_x, input_color, input_color_theme):
         heatmap = alt.Chart(input_df).mark_rect().encode(
            y=alt.Y(f'{input_y}:O', axis=alt.Axis(title="NƒÉm", titleFontSize=18, titlePadding=15, titleFontWeight=900, labelAngle=0)),
            x=alt.X(f'{input_x}:O', axis=alt.Axis(title="", titleFontSize=18, titlePadding=15, titleFontWeight=900)),
            color=alt.Color(f'max({input_color}):Q',
                             legend=None,
                             scale=alt.Scale(scheme=input_color_theme)),
            stroke=alt.value('black'),
            strokeWidth=alt.value(0.25),
        ).properties(width=900
        ).configure_axis(
        labelFontSize=12,
        titleFontSize=12
        ) 
         # height=300
         return heatmap
        def find_indicator_key_selected():
          if selected_indicator in indicator_list:
           return indicator_list_key[indicator_list.index(selected_indicator)]
          else:
           return ""
        # Choropleth map
        def make_choropleth(input_df, input_id, input_column, input_color_theme):
          attribute = find_indicator_key_selected()
          for feature in json["features"]:
            districid = feature["properties"]["district_code"]
            dataDistrict = input_df[input_df.district_code == districid]
            feature["properties"]["population"] = dataDistrict["population"].values[0]
            feature["properties"][attribute] = dataDistrict[attribute].values[0]
          df_JSON = pd.DataFrame()
          # Custom color scale
          COLOR_RANGE = [
           [247, 194, 207],
           [245, 161, 182],
           [244, 129, 157],
           [242, 97, 132],
           [241, 65, 108]
        ]
          max_population = json["features"].apply(lambda row: row["properties"]["population"]).max()
          print('hdjfhdjfh')
          print(max_population)
          # T√≠nh gi√° tr·ªã c·ªßa BREAKS t√πy thu·ªôc v√†o gi√° tr·ªã t·ªëi ƒëa c·ªßa population
          BREAKS = [max_population * i / 5 for i in range(1, 6)]
          print(BREAKS)
          def calculate_elevation(val):
           return math.sqrt(val) * 10

          # Parse the geometry out in Pandas
          df_JSON["coordinates"] = json["features"].apply(lambda row: row["geometry"]["coordinates"])
          df_JSON["name"] = json["features"].apply(lambda row: row["properties"]["name"])
          df_JSON["population"] = json["features"].apply(lambda row: row["properties"]["population"])
          df_JSON[attribute] = json["features"].apply(lambda row: row["properties"][attribute])
          df_JSON["elevation_population"] = json["features"].apply(lambda row: calculate_elevation(row["properties"]["population"]))
    
          # T√≠nh to√°n gi√° tr·ªã m√†u s·∫Øc t∆∞∆°ng ·ª©ng cho population
          def get_fill_color_population(value):
            for i, b in enumerate(BREAKS):
               if value < b:
                  return COLOR_RANGE[i]
            return COLOR_RANGE[-1]

          df_JSON["fill_color_population"] = df_JSON["population"].apply(get_fill_color_population)
          # Set up PyDeck for PolygonLayer with Tooltip
          polygon_layer = pdk.Layer(
           "PolygonLayer",
           df_JSON,
           id="geojson_population",
           opacity=0.6,
           stroked=False,
           get_polygon="coordinates",
           filled=True,
           wireframe=True,
           get_elevation="elevation_population",
           get_fill_color="fill_color_population",
           get_line_color=[255, 255, 255],
           elevation_scale=0, 
           extruded=False, 
           pickable=True,
          )
    
          tooltip = {"html": "<b>Qu·∫≠n/huy·ªán:</b> {name} <br /><b>D√¢n s·ªë (ngh√¨n ng∆∞·ªùi):</b> {population}<br /><b>"+selected_indicator+":</b> {"+attribute+"}"}

         # Set up PyDeck for Map with the PolygonLayer
          map_deck = pdk.Deck(
           layers=[polygon_layer],
           tooltip=tooltip,
           initial_view_state=pdk.ViewState(
               latitude=21.0285, longitude=105.8542, zoom=8, maxZoom=16, pitch=0.0, bearing=0
           ),
          effects=[
             {
                "@@type": "LightingEffect",
                "shadowColor": [0, 0, 0, 0.5],
                "ambientLight": {"@@type": "AmbientLight", "color": COLOR_RANGE[0], "intensity": 1.0},
                "directionalLights": [
                    {"@@type": "_SunLight", "timestamp": 1564696800000, "color": COLOR_RANGE[0], "intensity": 1.0, "_shadow": True}
                ],
             }
          ],
          height=300,
           )
          return map_deck
        # Calculation year-over-year population migrations
        def calculate_population_difference(input_df, input_year):
          selected_year_data = input_df[input_df['year'] == input_year].reset_index()
          previous_year_data = input_df[input_df['year'] == input_year - 1].reset_index()
          selected_year_data['population_difference'] = selected_year_data.population.sub(previous_year_data.population, fill_value=0)
          return pd.concat([selected_year_data.district, selected_year_data.id, selected_year_data.population, selected_year_data.population_difference], axis=1).sort_values(by="population_difference", ascending=False)
        def calculate_province_population_growth(data, province, year):
         # Chuy·ªÉn ƒë·ªïi c·ªôt 'year' sang ki·ªÉu s·ªë nguy√™n n·∫øu ch∆∞a ph·∫£i
         data['year'] = data['year'].astype(int)

         # Nh√≥m d·ªØ li·ªáu theo 'province' v√† 'year', t√≠nh t·ªïng d√¢n s·ªë
         province_data = data.groupby(['province', 'year'])['population'].sum().reset_index()
    
          # L·ªçc d·ªØ li·ªáu cho t·ªânh v√† nƒÉm c·ª• th·ªÉ
         selected_data = province_data[(province_data['province'] == province) & (province_data['year'] == int(year))]

         # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu cho t·ªânh v√† nƒÉm c·ª• th·ªÉ kh√¥ng
         if selected_data.empty:
          raise ValueError(f"No data found for {province} in the year {year}.")

         # T√≠nh t·ª∑ l·ªá tƒÉng so v·ªõi nƒÉm tr∆∞·ªõc n·∫øu c√≥, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ k√Ω t·ª± '-'
         previous_year_data = province_data[(province_data['province'] == province) & (province_data['year'] == int(year) - 1)]
         population_current_year = selected_data['population'].values[0]


         if not previous_year_data.empty:
            population_current_year = selected_data['population'].values[0]
            population_previous_year = previous_year_data['population'].values[0]
            population_growth_rate = round(population_current_year - population_previous_year,3)
         else:
            population_growth_rate = '-'
         return population_current_year, population_growth_rate
        def calculate_province_rate_growth(data, province, year):
          # Chuy·ªÉn ƒë·ªïi c·ªôt 'year' sang ki·ªÉu s·ªë nguy√™n n·∫øu ch∆∞a ph·∫£i
         data['year'] = data['year'].astype(int)

         attribute = find_indicator_key_selected()
         # Nh√≥m d·ªØ li·ªáu theo 'province' v√† 'year', t√≠nh t·ªïng d√¢n s·ªë
         province_data = data.groupby(['province', 'year'])[attribute].sum().reset_index()

         # L·ªçc d·ªØ li·ªáu cho t·ªânh v√† nƒÉm c·ª• th·ªÉ
         selected_data = province_data[(province_data['province'] == province) & (province_data['year'] == int(year))]

          # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu cho t·ªânh v√† nƒÉm c·ª• th·ªÉ kh√¥ng
         if selected_data.empty:
           raise ValueError(f"No data found for {province} in the year {year}.")

         # T√≠nh t·ª∑ l·ªá tƒÉng so v·ªõi nƒÉm tr∆∞·ªõc n·∫øu c√≥, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ k√Ω t·ª± '-'
         previous_year_data = province_data[(province_data['province'] == province) & (province_data['year'] == int(year) - 1)]
         rate_current_year = selected_data[attribute].values[0]


         if not previous_year_data.empty:
          rate_current_year = selected_data[attribute].values[0]
          rate_previous_year = previous_year_data[attribute].values[0]
          rate_growth_rate = rate_current_year - rate_previous_year
         else:
          rate_growth_rate = '-'
         return rate_current_year, rate_growth_rate
        #######################
        # Dashboard Main Panel
        col = st.columns((1.5, 4.5, 2), gap='medium')
        with col[0]:
         st.markdown('#### D√¢n s·ªë ' + str(selected_year))
         df_population_difference_sorted = calculate_population_difference(df_reshaped, selected_year)
         result = calculate_province_population_growth(df_reshaped, 1, selected_year)
         result_rate = calculate_province_rate_growth(df_reshaped, 1, selected_year)
         first_state_name = 'D√¢n s·ªë trung b√¨nh (ngh√¨n ng∆∞·ªùi)'
         first_state_population = result[0]
         first_state_delta = result[1]
         st.metric(label=first_state_name, value=first_state_population, delta=first_state_delta)

         last_state_name = selected_indicator
         last_state_population = round(result_rate[0]/30,1)
         if result_rate[1] != '-':
          last_state_delta = round(result_rate[1]/30,1)
         else:
          last_state_delta = '-'
        
         st.metric(label=last_state_name, value=last_state_population, delta=last_state_delta)

         st.markdown('#### ' + selected_indicator + " " + str(selected_year))
         attribute = find_indicator_key_selected()
         df_selected_sorted = df_selected_year.sort_values(by=attribute, ascending=False)
         st.dataframe(df_selected_sorted,
                 column_order=("district", attribute),
                 hide_index=True,
                 width=None,
                 use_container_width=True,
                 column_config={
                    "district": st.column_config.TextColumn(
                        "Qu·∫≠n/huy·ªán",
                    ),
                    attribute: st.column_config.ProgressColumn(
                        "Gi√° tr·ªã",
                        format="%f",
                        width=None,
                        min_value=min(df_selected_sorted[attribute]),
                        max_value=max(df_selected_sorted[attribute]),
                     )}
                 )
         
        with col[1]:
         st.markdown('#### B·∫£n ƒë·ªì d√¢n s·ªë H√† N·ªôi ' + str(selected_year))
         map_deck = make_choropleth(df_selected_year, 'district_code', 'population', selected_color_theme)
         st.pydeck_chart(map_deck)

         heatmap = make_heatmap(df_reshaped, 'year', 'district', 'population', selected_color_theme)
         st.altair_chart(heatmap, use_container_width=True)
        with col[2]:
         st.markdown('#### D√¢n s·ªë theo qu·∫≠n/huy·ªán ' + str(selected_year))

         st.dataframe(df_selected_year_sorted,
                 column_order=("district", "population"),
                 hide_index=True,
                 width=None,
                 use_container_width=True,
                 column_config={
                    "district": st.column_config.TextColumn(
                        "Qu·∫≠n/huy·ªán",
                    ),
                    "population": st.column_config.ProgressColumn(
                        "D√¢n s·ªë (ng∆∞·ªùi)",
                        format="%f",
                        min_value=0,
                        max_value=max(df_selected_year_sorted.population),
                     )}
                 )

         with st.expander('Th√¥ng tin', expanded=True):
          st.write('''
            - Ngu·ªìn d·ªØ li·ªáu: [CHI C·ª§C D√ÇN S·ªê - K·∫æ HO·∫†CH H√ìA GIA ƒê√åNH H√Ä N·ªòI](https://dskhhgdhanoi.gov.vn/).
            - :orange[**Ch·ªâ ti√™u d√¢n s·ªë**]: Atlas ƒëi·ªán t·ª≠ cung c·∫•p c√°c s·ªë li·ªáu v·ªÅ ch·ªâ ti√™u d√¢n s·ªë nh∆∞ m·∫≠t ƒë·ªô, t·ª∑ l·ªá tƒÉng d√¢n s·ªë t·ª± nhi√™n, m·∫≠t ƒë·ªô v√† nhi·ªÅu ti√™u ch√≠ kh√°c t·∫°i c√°c qu·∫≠n/huy·ªán tr√™n ƒë·ªãa b√†n Th√†nh ph·ªë H√† N·ªôi t·ª´ nƒÉm 2014 ƒë·∫øn 2023
            - Ph√°t tri·ªÉn b·ªüi: [eKMap](https://ekgis.com.vn/)
            ''')

        # B∆∞·ªõc 6: Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p v√† l∆∞u tr·ªØ v√†o session state
        st.session_state['authenticated'] = True
        st.session_state['username'] = username
        st.session_state['name'] = name

        # B∆∞·ªõc 7: Hi·ªÉn th·ªã m√£ JavaScript ƒë·ªÉ chuy·ªÉn h∆∞·ªõng
        st.markdown('<script> window.location.href = "/streamlit_app.py" </script>', unsafe_allow_html=True)
    else:
        # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói khi t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
        st.error("Nh·∫≠p username v√† password")
# Th·ª±c thi h√†m main khi t·ªáp ƒë∆∞·ª£c ch·∫°y
if __name__ == '__main__':
    main()
